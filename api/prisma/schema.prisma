// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum Providers {
  GOOGLE
}

enum ChatType {
  ONE_TO_ONE
  GROUP
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
}

enum ChatRolePermissionType {
  SEND_MESSAGE
  DELETE_OTHERS_MESSAGE
  MANAGE_MEMBERS
  KICK_MEMBERS
  BAN_MEMBERS
  CHANGE_CHAT_INFO
  MANAGE_ROLES
  ASSIGN_ROLES
}

enum UserStatus {
  ONLINE
  OFFLINE
  BUSY
  AWAY
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
}

model User {
  id           String     @id @default(uuid())
  // subId        String     @unique @map("sub_id")
  name         String
  email        String     @unique
  password     String?
  photo        String?
  status       UserStatus @default(ONLINE)
  lastActivity DateTime?  @map("last_activity")
  role         Role       @default(USER)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Account           Account[]
  Token             Token[]
  Message           Message[]
  ChatMember        ChatMember[]
  MessageReadStatus MessageReadStatus[]
  Requester         Friendship[]        @relation("Requester")
  Receiver          Friendship[]        @relation("Receiver")
  BlockingUser      BlockedUser[]       @relation("BlockingUser")
  BlockedUser       BlockedUser[]       @relation("BlockedUser")

  // @@index([subId])
  @@index([email])
  @@map("users")
}

model Account {
  id                String    @id @default(uuid())
  userId            String    @map("user_id")
  providerAccountId String    @unique @map("provider_account_id")
  provider          Providers

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("accounts")
}

model Friendship {
  requesterId String           @map("requester_id")
  receiverId  String           @map("receiver_id")
  status      FriendshipStatus @default(PENDING)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Requester User @relation("Requester", fields: [requesterId], references: [id], onDelete: Cascade)
  Receiver  User @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@id([requesterId, receiverId])
  @@index([receiverId])
  @@index([requesterId])
  @@map("friendships")
}

model BlockedUser {
  blockingUserId String @map("blocking_user_id")
  blockedUserId  String @map("blocked_user_id")

  createdAt DateTime @default(now()) @map("created_at")

  BlockingUser User @relation("BlockingUser", fields: [blockingUserId], references: [id], onDelete: Cascade)
  BlockedUser  User @relation("BlockedUser", fields: [blockedUserId], references: [id], onDelete: Cascade)

  @@id([blockingUserId, blockedUserId])
  @@index([blockingUserId])
  @@index([blockedUserId])
  @@map("blocked_users")
}

model Chat {
  id             String    @id @default(uuid())
  name           String
  type           ChatType
  photo          String?
  isPrivate      Boolean   @default(false) @map("is_private")
  inviteCode     String?   @map("invite_code")
  lastMessagedAt DateTime? @map("last_messaged_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Message    Message[]
  ChatMember ChatMember[]
  ChatRole   ChatRole[]

  @@unique([inviteCode])
  @@map("chats")
}

model ChatMember {
  chatId     String    @map("chat_id")
  userId     String    @map("user_id")
  chatRoleId String    @map("chat_role_id")
  bannedAt   DateTime? @map("banned_at")
  leftAt     DateTime? @map("left_at")

  createdAt DateTime @default(now()) @map("created_at")

  Chat     Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  User     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ChatRole ChatRole @relation(fields: [chatRoleId], references: [id])

  @@id([chatId, userId])
  @@index([userId])
  @@map("chat_members")
}

model ChatRole {
  id        String  @id @default(uuid())
  chatId    String  @map("chat_id")
  name      String
  color     String  @default("#000000")
  isDefault Boolean @default(false) @map("is_default")

  Chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  ChatMember         ChatMember[]
  ChatRolePermission ChatRolePermission[]

  @@unique([chatId, name])
  @@index([chatId])
  @@map("chat_roles")
}

model ChatRolePermission {
  id         String                 @id @default(uuid())
  chatRoleId String                 @map("chat_role_id")
  permission ChatRolePermissionType

  createdAt DateTime @default(now()) @map("created_at")

  ChatRole ChatRole @relation(fields: [chatRoleId], references: [id], onDelete: Cascade)

  @@unique([chatRoleId, permission])
  @@index([chatRoleId])
  @@map("chat_role_permissions")
}

model Message {
  id       String      @id @default(uuid())
  content  String?
  mediaUrl String?     @map("media_url")
  type     MessageType
  senderId String      @map("sender_id")
  chatId   String      @map("chat_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  User              User                @relation(fields: [senderId], references: [id], onDelete: Cascade)
  Chat              Chat                @relation(fields: [chatId], references: [id], onDelete: Cascade)
  MessageReadStatus MessageReadStatus[]

  @@index([chatId])
  @@index([senderId])
  @@index([chatId, createdAt])
  @@map("messages")
}

model MessageReadStatus {
  messageId String   @map("message_id")
  userId    String   @map("user_id")
  readAt    DateTime @map("read_at")

  createdAt DateTime @default(now()) @map("created_at")

  Message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  User    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([messageId, userId])
  @@index([messageId])
  @@index([userId])
  @@map("message_read_status")
}

model Token {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  revokedAt DateTime? @map("revoked_at")
  expiresAt DateTime  @map("expires_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("tokens")
}
